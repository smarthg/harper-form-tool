import express, { type Request, Response, NextFunction } from "express";
import { registerRoutes } from "./routes";
import { setupVite, serveStatic, log } from "./vite";
import { Clerk } from '@clerk/clerk-sdk-node';
import * as dotenv from 'dotenv';
import path from 'path';
import fs from 'fs';

// Load environment variables from .env file
dotenv.config();

// Check if we're in a production environment
const isProduction = process.env.NODE_ENV === 'production' || 
                    process.env.REPL_SLUG !== undefined;

// Force developer mode to false in production
if (isProduction) {
  console.log('Production environment detected, forcing developer mode to false');
  process.env.DEVELOPER_MODE = 'false';
} else {
  // In local development, use the value from .env
  console.log('Development environment detected, using developer mode from .env');
}

// Initialize Clerk with your API key
const clerk = Clerk({ secretKey: process.env.CLERK_SECRET_KEY });

// Set up Vite environment variables
process.env.VITE_CLERK_PUBLISHABLE_KEY = process.env.CLERK_PUBLISHABLE_KEY;

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// Set up static file serving for uploads
// This is important for the PDF files generated by Anvil
const publicDir = process.env.REPL_ID ? 'public' : 'client/public';
const uploadDir = path.join(process.cwd(), publicDir, 'uploads');

// Ensure uploads directory exists
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
  console.log('Created uploads directory at:', uploadDir);
}

// Serve static files from uploads directory
app.use('/uploads', express.static(uploadDir));
console.log('Serving static files from:', uploadDir);

app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }

      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "â€¦";
      }

      log(logLine);
    }
  });

  next();
});

(async () => {
  const server = await registerRoutes(app);

  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";

    res.status(status).json({ message });
    throw err;
  });

  // importantly only setup vite in development and after
  // setting up all the other routes so the catch-all route
  // doesn't interfere with the other routes
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }

  // ALWAYS serve the app on port 5000
  // this serves both the API and the client.
  // It is the only port that is not firewalled.
  const port = 5000;
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true,
  }, () => {
    log(`serving on port ${port}`);
  });
})();
